{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Documents\\\\vortrex-presale\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './index.css';\nimport { Contract, BrowserProvider, parseEther, parseUnits } from 'ethers';\nimport axios from 'axios';\nimport HomePage from './components/HomePage';\nimport TokenInfoPage from './components/TokenInfoPage';\nimport RoadmapPage from './components/RoadmapPage';\nimport ContactPage from './components/ContactPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [bnbPrice, setBnbPrice] = useState(null);\n  const [usdtPrice, setUsdtPrice] = useState(null);\n  const [amount, setAmount] = useState(1);\n  const [totalTokens, setTotalTokens] = useState(69000);\n  const [paymentMethod, setPaymentMethod] = useState('USDT');\n  const [isConnected, setIsConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const USDT_ADDRESS = \"0x55d398326f99059fF775485246999027B3197955\";\n  const PRESALE_CONTRACT = \"0x09Ff9D31fdFaAE455Cc6d8dB28C022B1057Abdfb\";\n  const USDT_ABI = [\"function approve(address spender, uint256 amount) public returns (bool)\"];\n  const PRESALE_ABI = [\"function buyWithBNB() external payable\", \"function buyWithUSDT(uint256 amount) external\"];\n  useEffect(() => {\n    axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin,tether&vs_currencies=usd').then(res => {\n      setBnbPrice(res.data.binancecoin.usd);\n      setUsdtPrice(res.data.tether.usd);\n    }).catch(err => console.error(err));\n  }, []);\n  useEffect(() => {\n    if (paymentMethod === 'USDT') {\n      setTotalTokens(amount * 69000); // 1 USDT = 69000 VTX\n    } else if (paymentMethod === 'BNB' && bnbPrice) {\n      const tokensPerBNB = bnbPrice * 69000;\n      const tokens = amount / bnbPrice * tokensPerBNB; // amount is in USD\n      setTotalTokens(tokens);\n    }\n  }, [amount, paymentMethod, bnbPrice]);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new BrowserProvider(window.ethereum);\n        const accounts = await provider.send('eth_requestAccounts', []);\n        const network = await provider.getNetwork();\n        if (network.chainId !== 56) {\n          alert('Please switch to Binance Smart Chain (BSC)');\n          return;\n        }\n        if (accounts.length > 0) {\n          setWalletAddress(accounts[0]);\n          setIsConnected(true);\n          alert('MetaMask Connected!');\n        } else {\n          alert('No accounts found.');\n        }\n      } catch (error) {\n        console.error('Connection error:', error);\n        alert('Error connecting to MetaMask.');\n      }\n    } else {\n      alert('MetaMask not detected.');\n    }\n  };\n  const handleAmountChange = e => {\n    const val = e.target.value;\n    setAmount(val);\n  };\n  const handlePaymentMethodChange = method => {\n    setPaymentMethod(method);\n  };\n  const buyTokens = async () => {\n    if (!isConnected) return alert('Connect wallet first');\n    try {\n      const provider = new BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const presale = new Contract(PRESALE_CONTRACT, PRESALE_ABI, signer);\n      const totalUsd = parseFloat(amount);\n      const tokensToBuy = totalUsd * 69000;\n      if (paymentMethod === 'BNB') {\n        if (!bnbPrice) return alert('BNB price not loaded');\n        const totalInBNB = (totalUsd / bnbPrice).toFixed(6); // Fix precision\n        const valueToSend = parseEther(totalInBNB);\n        console.log(`Buying with BNB: ${totalInBNB} BNB (wei: ${valueToSend})`);\n        const tx = await presale.buyWithBNB({\n          value: valueToSend,\n          gasLimit: 300000\n        });\n        await tx.wait();\n        alert(`BNB Payment Success! You bought ${tokensToBuy.toLocaleString()} VTX`);\n      } else if (paymentMethod === 'USDT') {\n        const usdt = new Contract(USDT_ADDRESS, USDT_ABI, signer);\n        const amountInUSDT = parseUnits(totalUsd.toString(), 18);\n        const approveTx = await usdt.approve(PRESALE_CONTRACT, amountInUSDT);\n        await approveTx.wait();\n        const buyTx = await presale.buyWithUSDT(amountInUSDT);\n        await buyTx.wait();\n        alert(`USDT Payment Success! You bought ${tokensToBuy.toLocaleString()} VTX`);\n      }\n    } catch (err) {\n      console.error('Transaction Error:', err);\n      alert('Transaction Failed');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"font-sans text-white bg-black\",\n    children: [/*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TokenInfoPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoadmapPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContactPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"MgtgPisrgiyPSRKap+koFz4o0pc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Contract","BrowserProvider","parseEther","parseUnits","axios","HomePage","TokenInfoPage","RoadmapPage","ContactPage","jsxDEV","_jsxDEV","App","_s","bnbPrice","setBnbPrice","usdtPrice","setUsdtPrice","amount","setAmount","totalTokens","setTotalTokens","paymentMethod","setPaymentMethod","isConnected","setIsConnected","walletAddress","setWalletAddress","USDT_ADDRESS","PRESALE_CONTRACT","USDT_ABI","PRESALE_ABI","get","then","res","data","binancecoin","usd","tether","catch","err","console","error","tokensPerBNB","tokens","connectWallet","window","ethereum","provider","accounts","send","network","getNetwork","chainId","alert","length","handleAmountChange","e","val","target","value","handlePaymentMethodChange","method","buyTokens","signer","getSigner","presale","totalUsd","parseFloat","tokensToBuy","totalInBNB","toFixed","valueToSend","log","tx","buyWithBNB","gasLimit","wait","toLocaleString","usdt","amountInUSDT","toString","approveTx","approve","buyTx","buyWithUSDT","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Documents/vortrex-presale/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './index.css';\r\nimport { Contract, BrowserProvider, parseEther, parseUnits } from 'ethers';\r\nimport axios from 'axios';\r\n\r\nimport HomePage from './components/HomePage';\r\nimport TokenInfoPage from './components/TokenInfoPage';\r\nimport RoadmapPage from './components/RoadmapPage';\r\nimport ContactPage from './components/ContactPage';\r\n\r\nconst App = () => {\r\n  const [bnbPrice, setBnbPrice] = useState(null);\r\n  const [usdtPrice, setUsdtPrice] = useState(null);\r\n  const [amount, setAmount] = useState(1);\r\n  const [totalTokens, setTotalTokens] = useState(69000);\r\n  const [paymentMethod, setPaymentMethod] = useState('USDT');\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [walletAddress, setWalletAddress] = useState(\"\");\r\n\r\n  const USDT_ADDRESS = \"0x55d398326f99059fF775485246999027B3197955\";\r\n  const PRESALE_CONTRACT = \"0x09Ff9D31fdFaAE455Cc6d8dB28C022B1057Abdfb\";\r\n\r\n  const USDT_ABI = [\r\n    \"function approve(address spender, uint256 amount) public returns (bool)\"\r\n  ];\r\n\r\n  const PRESALE_ABI = [\r\n    \"function buyWithBNB() external payable\",\r\n    \"function buyWithUSDT(uint256 amount) external\"\r\n  ];\r\n\r\n  useEffect(() => {\r\n    axios.get('https://api.coingecko.com/api/v3/simple/price?ids=binancecoin,tether&vs_currencies=usd')\r\n      .then(res => {\r\n        setBnbPrice(res.data.binancecoin.usd);\r\n        setUsdtPrice(res.data.tether.usd);\r\n      })\r\n      .catch(err => console.error(err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (paymentMethod === 'USDT') {\r\n      setTotalTokens(amount * 69000); // 1 USDT = 69000 VTX\r\n    } else if (paymentMethod === 'BNB' && bnbPrice) {\r\n      const tokensPerBNB = bnbPrice * 69000;\r\n      const tokens = (amount / bnbPrice) * tokensPerBNB; // amount is in USD\r\n      setTotalTokens(tokens);\r\n    }\r\n  }, [amount, paymentMethod, bnbPrice]);\r\n\r\n  const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const provider = new BrowserProvider(window.ethereum);\r\n        const accounts = await provider.send('eth_requestAccounts', []);\r\n        const network = await provider.getNetwork();\r\n        if (network.chainId !== 56) {\r\n          alert('Please switch to Binance Smart Chain (BSC)');\r\n          return;\r\n        }\r\n        if (accounts.length > 0) {\r\n          setWalletAddress(accounts[0]);\r\n          setIsConnected(true);\r\n          alert('MetaMask Connected!');\r\n        } else {\r\n          alert('No accounts found.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Connection error:', error);\r\n        alert('Error connecting to MetaMask.');\r\n      }\r\n    } else {\r\n      alert('MetaMask not detected.');\r\n    }\r\n  };\r\n\r\n  const handleAmountChange = (e) => {\r\n    const val = e.target.value;\r\n    setAmount(val);\r\n  };\r\n\r\n  const handlePaymentMethodChange = (method) => {\r\n    setPaymentMethod(method);\r\n  };\r\n\r\n  const buyTokens = async () => {\r\n    if (!isConnected) return alert('Connect wallet first');\r\n\r\n    try {\r\n      const provider = new BrowserProvider(window.ethereum);\r\n      const signer = await provider.getSigner();\r\n      const presale = new Contract(PRESALE_CONTRACT, PRESALE_ABI, signer);\r\n\r\n      const totalUsd = parseFloat(amount);\r\n      const tokensToBuy = totalUsd * 69000;\r\n\r\n      if (paymentMethod === 'BNB') {\r\n        if (!bnbPrice) return alert('BNB price not loaded');\r\n        const totalInBNB = (totalUsd / bnbPrice).toFixed(6); // Fix precision\r\n        const valueToSend = parseEther(totalInBNB);\r\n\r\n        console.log(`Buying with BNB: ${totalInBNB} BNB (wei: ${valueToSend})`);\r\n\r\n        const tx = await presale.buyWithBNB({\r\n          value: valueToSend,\r\n          gasLimit: 300000,\r\n        });\r\n\r\n        await tx.wait();\r\n        alert(`BNB Payment Success! You bought ${tokensToBuy.toLocaleString()} VTX`);\r\n      } else if (paymentMethod === 'USDT') {\r\n        const usdt = new Contract(USDT_ADDRESS, USDT_ABI, signer);\r\n        const amountInUSDT = parseUnits(totalUsd.toString(), 18);\r\n\r\n        const approveTx = await usdt.approve(PRESALE_CONTRACT, amountInUSDT);\r\n        await approveTx.wait();\r\n\r\n        const buyTx = await presale.buyWithUSDT(amountInUSDT);\r\n        await buyTx.wait();\r\n        alert(`USDT Payment Success! You bought ${tokensToBuy.toLocaleString()} VTX`);\r\n      }\r\n    } catch (err) {\r\n      console.error('Transaction Error:', err);\r\n      alert('Transaction Failed');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"font-sans text-white bg-black\">\r\n      <HomePage />\r\n      {/* Rest of your UI remains unchanged */}\r\n      {/* ... */}\r\n      <TokenInfoPage />\r\n      <RoadmapPage />\r\n      <ContactPage />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}